"""Демонстрація помилки, що часто допускається, і способу її вирішення"""


def make_powers(n):
    """Функція, яка повертає список функцій, кожна з яких обчислює
    ступінь аргументу, що дорівнює цьому індексу плюс 1
    (Неправильна реалізація)
    """

    functions = []

    for i in range(1, n + 1):
        functions.append(lambda x: x ** i)

    return functions


for function in make_powers(3):
    print(function(2))

# Видно, що результатом було не 2, 4, 8, як можна було б очікувати, а 8, 8, 8

print()

# Причиною цього є так зване пізнє зв'язування. До того момента,
# коли викликаються функції зі списку, цикл функції make_powers вже виконаний і
# Змінна i завжди дорівнює n + 1.
#
# Для того, щоб позбутися цього, необхідно скопіювати цю змінну
# у локальні змінні кожної функції. Єдиний спосіб створити локальну
# змінну в лямбда-вираженні - це створити параметр функції.


def make_powers(n):
    """Функція, яка повертає список функцій, кожна з яких обчислює
    ступінь аргументу, що дорівнює цьому індексу плюс 1
    (правильна реалізація)
    """

    functions = []

    for i in range(1, n + 1):
        functions.append(lambda x, i=i: x ** i)

    return functions


for i in make_powers(3):
    print(i(2))
